"""
Enhanced right panel module for Henna Gallery Editor.
Handles metadata editing with thread-safe undo/redo support and advanced tag management.
Complete implementation with improved layout and collapsible export section.
"""

import tkinter as tk
import threading
from tkinter import ttk, messagebox
from typing import Dict, Callable, Optional, List, Any
from datetime import datetime
from gui.styles import COLORS, FONTS

def _create_rounded_rect(self, x1, y1, x2, y2, radius=25, **kwargs):
    points = []
    # Top left
    points.extend([x1+radius, y1, x2-radius, y1])
    # Top right
    points.extend([x2, y1, x2, y1+radius])
    points.extend([x2, y1+radius, x2, y2-radius])
    # Bottom right
    points.extend([x2-radius, y2, x1+radius, y2])
    # Bottom left
    points.extend([x1, y2-radius, x1, y1+radius])
    points.extend([x1, y1+radius, x1+radius, y1])
    return self.create_polygon(points, **kwargs, smooth=True)

# Add the method to Canvas class
tk.Canvas.create_rounded_rect = _create_rounded_rect

class HistoryManager:
    """Track changes for undo/redo functionality with thread safety."""
    def __init__(self, max_steps: int = 50):
        self.undo_stack: List[Dict] = []
        self.redo_stack: List[Dict] = []
        self.max_steps = max_steps
        self._lock = threading.Lock()

    def record_change(self, field: str, old_value: Any, new_value: Any) -> None:
        """Record a change to the history with thread safety."""
        with self._lock:
            self.undo_stack.append({
                'field': field,
                'old_value': old_value,
                'new_value': new_value,
                'timestamp': datetime.now()
            })
            if len(self.undo_stack) > self.max_steps:
                self.undo_stack.pop(0)
            self.redo_stack.clear()

    def get_undo_change(self) -> Optional[Dict]:
        """Get the next undo change if available with thread safety."""
        with self._lock:
            return self.undo_stack.pop() if self.undo_stack else None

    def get_redo_change(self) -> Optional[Dict]:
        """Get the next redo change if available with thread safety."""
        with self._lock:
            return self.redo_stack.pop() if self.redo_stack else None

class RightPanel(tk.Frame):
    """Enhanced right panel with improved layout and collapsible export section."""
    DEFAULT_EXPORT_SETTINGS = {
        "format": "webp",
        "quality": 85,
        "resize_enabled": True,
        "max_width": 1200,
        "max_height": 1200
    }

    def __init__(self, parent, status_callback, config, *args, **kwargs):
        super().__init__(parent, *args, **kwargs)
        self.configure(
            bg=COLORS["background"],
            width=400,
            padx=15,
            pady=15
        )

        self.grid_propagate(False)  # Prevent auto-resizing
        self.columnconfigure(0, weight=1)  # Make column expandable
        
        self.pack_propagate(False)
        self.status_cb = status_callback
        self.config = config
        self.current_data = None
        self.history = HistoryManager()
        self.tag_suggestions = []
        
        # Initialize export settings
        self.export_settings = {
            **self.DEFAULT_EXPORT_SETTINGS,
            **self.config.get("export_settings", {})
        }
        
        # Main layout structure
        self.grid_rowconfigure(0, weight=0)  # Header
        self.grid_rowconfigure(1, weight=1)  # Edit form
        self.grid_rowconfigure(2, weight=0)  # Action buttons
        self.grid_rowconfigure(3, weight=0)  # Export section
        self.grid_rowconfigure(4, weight=0)  # (reserved)
        self.grid_rowconfigure(5, weight=0)  # Exit section
            #self.grid_columnconfigure(0, weight=1)
        
        #self.grid_rowconfigure(6, weight=0)  # Exit button
        #self.grid_rowconfigure(2, weight=0)  # Navigation buttons
        #self.grid_rowconfigure(3, weight=0)  # Save buttons

        # Create widgets
        self._create_header()
        self._create_edit_form()
        self._create_action_buttons()  # This will create all buttons in one place
        self._create_collapsible_export_section()
        self._create_exit_section()  # New exit section
       
        # Add this line to create the button frame
        #self.button_frame = ttk.Frame(self)
        #self.button_frame.grid(row=3, column=0, sticky="ew", pady=(10, 0))
                
        # Load suggestions and setup bindings
        self.load_tag_suggestions()
        self.setup_bindings()

    def _create_header(self):
        """Create the header section."""
        self.header = tk.Frame(self, bg=COLORS["accent"])
        self.header.grid(row=0, column=0, sticky="ew", pady=(0, 10))
        
        tk.Label(
            self.header,
            text="Edit Image Details",
            font=FONTS["heading"],
            bg=COLORS["accent"],
            fg="white",
            padx=10,
            pady=5
        ).pack()

    def _create_edit_form(self):
        """Create the main edit form with scrollbar."""
        # Container frame
        form_container = tk.Frame(self, bg=COLORS["background"])
        form_container.grid(row=1, column=0, sticky="nsew", padx=(0, 10))
        
        # Canvas and scrollbar
        self.form_canvas = tk.Canvas(
            form_container,
            bg=COLORS["background"],
            highlightthickness=0
        )
        scrollbar = ttk.Scrollbar(
            form_container,
            orient="vertical",
            command=self.form_canvas.yview
        )
        
        # Form frame inside canvas
        self.form_frame = tk.Frame(self.form_canvas, bg=COLORS["background"])
        self.form_frame.bind(
            "<Configure>",
            lambda e: self.form_canvas.configure(scrollregion=self.form_canvas.bbox("all"))
        )
        
        self.form_canvas.create_window((0, 0), window=self.form_frame, anchor="nw")
        self.form_canvas.configure(yscrollcommand=scrollbar.set)
        
        # Layout
        self.form_canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y", padx=(0, 5))  # Add padding
        
        # Configure form columns
        self.form_frame.columnconfigure(1, weight=1)  # Make second column expandable

        # Create form fields
        self._create_form_fields()

        # Configure field expansion
        for entry in [self.filename_entry, self.title_entry, self.keywords_entry]:
            entry.grid(sticky="ew", padx=5)
        
        # Text widgets with proper padding
        self.caption_entry.grid(sticky="nsew", padx=5, pady=(0, 10))
        self.alt_text_entry.grid(sticky="nsew", padx=5)

    def _create_form_fields(self):
        """Create all form fields with improved spacing."""
        # Configure form frame columns
        self.form_frame.columnconfigure(1, weight=1)
        
        # List of fields to create (label, var_name, row, type)
        fields = [
            ("Filename:", "filename", 0, "entry"),
            ("Title:", "title", 1, "entry"),
            ("Caption:", "caption", 2, "text"),
            ("Keywords:", "keywords", 3, "combo"),
            ("Alt Text:", "alt_text", 4, "text"),
            ("Headline:", "headline", 5, "entry"),
            ("Featured:", "featured", 6, "checkbox")  # Moved to after headline
        ]
        
        # Create fields
        for label, var_name, row, field_type in fields:
            if field_type == "checkbox":
                # Special handling for featured checkbox
                self.featured_var = tk.BooleanVar()
                self.featured_cb = tk.Checkbutton(
                    self.form_frame,
                    text="â˜… Featured Image",
                    variable=self.featured_var,
                    font=("Georgia", 12, "bold"),
                    bg=COLORS["background"],
                    fg=COLORS["dark"],
                    selectcolor=COLORS["primary"],
                    command=self.on_featured_change,
                    padx=5,
                    pady=10
                )
                self.featured_cb.grid(row=row, column=0, columnspan=2, sticky="w", pady=(15, 20))
            else:
                tk.Label(
                    self.form_frame,
                    text=label,
                    font=FONTS["body"],
                    bg=COLORS["background"],
                    fg=COLORS["dark"]
                ).grid(row=row, column=0, sticky="nw", pady=(10, 0))
                
                if field_type == "entry":
                    entry = tk.Entry(
                        self.form_frame,
                        font=FONTS["body"],
                        width=30
                    )
                    entry.grid(row=row, column=1, sticky="ew", pady=(10, 0), padx=5)
                    setattr(self, f"{var_name}_entry", entry)
                    
                elif field_type == "text":
                    text = tk.Text(
                        self.form_frame,
                        height=3,
                        width=30,
                        font=FONTS["body"],
                        wrap=tk.WORD,
                        padx=5,
                        pady=5
                    )
                    text.grid(row=row, column=1, sticky="ew", pady=(10, 0), padx=5)
                    setattr(self, f"{var_name}_entry", text)
                    
                elif field_type == "combo":
                    combo = ttk.Combobox(
                        self.form_frame,
                        font=FONTS["body"],
                        values=self.tag_suggestions,
                        postcommand=self.update_tag_suggestions
                    )
                    combo.grid(row=row, column=1, sticky="ew", pady=(10, 0), padx=5)
                    combo.bind('<KeyRelease>', self.on_tags_change)
                    combo.bind('<<ComboboxSelected>>', self.on_tag_selected)
                    setattr(self, f"{var_name}_entry", combo)
                    # Initialize with empty values to prevent recursion
                    combo['values'] = []

    def update_tag_suggestions(self) -> None:
        """Update the tag suggestions based on current input"""
        if not hasattr(self, 'keywords_entry'):
            return
            
        # Temporarily unbind the postcommand to prevent recursion
        self.keywords_entry.configure(postcommand=None)
        
        try:
            current_text = self.keywords_entry.get()
            current_tags = [k.strip() for k in current_text.split(",") if k.strip()]
            
            # Filter suggestions to exclude already added tags
            filtered_suggestions = [
                tag for tag in self.tag_suggestions 
                if tag.lower() not in [t.lower() for t in current_tags]]
            
            self.keywords_entry['values'] = filtered_suggestions
        finally:
            # Re-bind the postcommand after updating
            self.keywords_entry.configure(postcommand=self.update_tag_suggestions)

    def _create_collapsible_export_section(self):
        """Create export section with rounded corners."""
        # Main container
        self.export_container = tk.Frame(self, bg=COLORS["background"],padx=5)  # Additional padding)
        self.export_container.grid(row=3, column=0, sticky="ew", pady=(10, 0))
        
        # Toggle button with rounded corners
        self.export_toggle_btn = tk.Button(
            self.export_container,
            text="â–º Export Settings",
            font=FONTS["body"],
            bg=COLORS["accent"],
            fg="white",
            bd=0,
            relief="flat",
            command=self._toggle_export_section
        )
        self.export_toggle_btn.pack(fill="x", padx=5, pady=(0, 5))
        
        # Export content frame
        self.export_frame = tk.Frame(
            self.export_container,
            bg=COLORS["export_bg"],
            padx=10,
            pady=10,
            highlightthickness=1,
            highlightbackground=COLORS["export_border"]
        )
        
        # Add controls
        self._create_export_controls()
        
        # Start collapsed
        self.export_visible = False
        self.export_frame.pack_forget()

    def _draw_rounded_rect(self):
        """Draw rounded rectangle on canvas."""
        width = self.export_container.winfo_width()
        self.export_canvas.delete("all")
        self.export_canvas.create_rounded_rect(
            0, 0, width, 40,
            radius=8,
            fill=COLORS["accent"],
            outline=COLORS["export_border"]
        )

    def _on_resize(self, event):
        """Handle window resize."""
        self._draw_rounded_rect()
        if hasattr(self, 'export_toggle_id'):
            self.export_canvas.itemconfigure(
                self.export_toggle_id,
                width=self.winfo_width()-10
            )

    def create_rounded_rect(self, x1, y1, x2, y2, radius=25, **kwargs):
        """Create rounded rectangle coordinates."""
        points = []
        # Top left
        points.extend([x1+radius, y1, x2-radius, y1])
        # Top right
        points.extend([x2, y1, x2, y1+radius])
        points.extend([x2, y1+radius, x2, y2-radius])
        # Bottom right
        points.extend([x2-radius, y2, x1+radius, y2])
        # Bottom left
        points.extend([x1, y2-radius, x1, y1+radius])
        points.extend([x1, y1+radius, x1+radius, y1])
        return self.export_canvas.create_polygon(points, **kwargs, smooth=True)

    def _create_export_controls(self):
        """Create export controls."""
        if hasattr(self, '_export_controls_created'):
            return
            
        # Format selection
        format_frame = ttk.Frame(self.export_frame)
        format_frame.pack(fill="x", pady=5)
        
        ttk.Label(format_frame, text="Format:").pack(side="left")
        self.export_format = tk.StringVar(value=self.export_settings["format"])
        ttk.Combobox(
            format_frame,
            textvariable=self.export_format,
            values=["webp", "jpg", "png"],
            state="readonly",
            width=8
        ).pack(side="left", padx=5)
        
        # Quality control
        quality_frame = ttk.Frame(self.export_frame)
        quality_frame.pack(fill="x", pady=5)
        
        ttk.Label(quality_frame, text="Quality:").pack(side="left")
        self.export_quality = tk.IntVar(value=self.export_settings["quality"])
        ttk.Scale(
            quality_frame,
            from_=1,
            to=100,
            variable=self.export_quality,
            command=lambda v: self.quality_label.config(text=f"{int(float(v))}%")
        ).pack(side="left", expand=True, fill="x", padx=5)
        self.quality_label = ttk.Label(quality_frame, text=f"{self.export_settings['quality']}%")
        self.quality_label.pack(side="left")
        
        # Resize toggle
        self.resize_enabled = tk.BooleanVar(value=self.export_settings["resize_enabled"])
        ttk.Checkbutton(
            self.export_frame,
            text="Resize on Export",
            variable=self.resize_enabled,
            command=self._toggle_resize_fields
        ).pack(anchor="w", pady=5)
        
        # Resize dimensions
        self.resize_frame = ttk.Frame(self.export_frame)
        self.max_width = tk.IntVar(value=self.export_settings["max_width"])
        self.max_height = tk.IntVar(value=self.export_settings["max_height"])
        
        ttk.Label(self.resize_frame, text="Max Width:").grid(row=0, column=0, sticky="e")
        ttk.Entry(self.resize_frame, textvariable=self.max_width, width=6).grid(row=0, column=1, padx=5)
        ttk.Label(self.resize_frame, text="px").grid(row=0, column=2, sticky="w")
        
        ttk.Label(self.resize_frame, text="Max Height:").grid(row=1, column=0, sticky="e")
        ttk.Entry(self.resize_frame, textvariable=self.max_height, width=6).grid(row=1, column=1, padx=5)
        ttk.Label(self.resize_frame, text="px").grid(row=1, column=2, sticky="w")
        
        self._toggle_resize_fields()  # Set initial state
        
        # Export button
        ttk.Button(
            self.export_frame,
            text="Export Selected",
            command=self.on_export,
            style="Accent.TButton"
        ).pack(pady=(10, 5))
        
        self._export_controls_created = True

    def _create_action_buttons(self):
        """Create action buttons with new layout."""
        style = ttk.Style()
        
        # Main container
        button_frame = tk.Frame(self, bg=COLORS["background"], padx=5 )
        button_frame.grid(row=2, column=0, sticky="ew", pady=(5, 0), padx=(0, 5))
        
        # Configure columns for equal width buttons
        button_frame.columnconfigure(0, weight=1)
        button_frame.columnconfigure(1, weight=1)
        
        # Navigation buttons (row 0)
        self.prev_btn = ttk.Button(
            button_frame, 
            text="â—„ Previous",
            style="Secondary.TButton"
        )
        self.prev_btn.grid(row=0, column=0, padx=2, pady=(10, 5), sticky="ew")
        
        self.next_btn = ttk.Button(
            button_frame, 
            text="Next â–º",
            style="Secondary.TButton"
        )
        self.next_btn.grid(row=0, column=1, padx=2, pady=(10, 5), sticky="ew")
        
        # Move buttons (row 1)
        self.up_btn = ttk.Button(
            button_frame, 
            text="â–² Move Up",
            style="Secondary.TButton"
        )
        self.up_btn.grid(row=1, column=0, padx=2, pady=5, sticky="ew")
        
        self.down_btn = ttk.Button(
            button_frame, 
            text="â–¼ Move Down",
            style="Secondary.TButton"
        )
        self.down_btn.grid(row=1, column=1, padx=2, pady=5, sticky="ew")
        
        # Undo/Redo buttons (row 2)
        self.undo_btn = ttk.Button(
            button_frame, 
            text="â†© Undo", 
            command=self.undo_change,
            style="Secondary.TButton"
        )
        self.undo_btn.grid(row=2, column=0, padx=2, pady=5, sticky="ew")
        
        self.redo_btn = ttk.Button(
            button_frame, 
            text="â†ª Redo", 
            command=self.redo_change,
            style="Secondary.TButton"
        )
        self.redo_btn.grid(row=2, column=1, padx=2, pady=5, sticky="ew")
        
        # Save buttons (row 3)
        self.save_btn = ttk.Button(
            button_frame,
            text="ðŸ’¾ Save",
            command=self.save_current,
            style="Primary.TButton"  # More prominent style
        )
        self.save_btn.grid(row=3, column=0, padx=2, pady=5, sticky="ew")
        
        self.save_exit_btn = ttk.Button(
            button_frame,
            text="ðŸ’¾ Save & Exit",
            command=self.save_and_exit,
            style="Primary.TButton"  # More prominent style
        )
        self.save_exit_btn.grid(row=3, column=1, padx=2, pady=5, sticky="ew")

    
    def _create_exit_section(self):
        """Create distinct exit section at bottom."""
        # Container with some top padding
        exit_frame = tk.Frame(self, bg=COLORS["background"],padx=5)
        exit_frame.grid(row=5, column=0, sticky="ew", pady=(15, 0))
        
        # Exit button with custom styling
        self.exit_btn = tk.Button(
            exit_frame,
            text="ðŸšª Exit",
            command=self.on_exit,
            font=FONTS["body"],
            bg=COLORS["exit_bg"],
            fg="white",
            bd=0,
            relief="flat",
            activebackground="#B71C1C",
            padx=10,
            pady=5
        )
        self.exit_btn.pack(fill="x", expand=True)
        
    def _toggle_export_section(self):
        """Toggle export section visibility."""
        if self.export_visible:
            self.export_frame.pack_forget()
            self.export_toggle_btn.config(text="â–º Export Settings")
        else:
            self.export_frame.pack(fill="x", padx=5, pady=(0, 10))
            self.export_toggle_btn.config(text="â–¼ Export Settings")
        self.export_visible = not self.export_visible

    def _toggle_resize_fields(self):
        """Show/hide resize controls."""
        if self.resize_enabled.get():
            self.resize_frame.pack(fill="x", padx=10)
        else:
            self.resize_frame.pack_forget()

    def set_button_commands(
        self,
        prev_command: Callable,
        next_command: Callable,
        save_command: Callable,
        up_command: Callable,
        down_command: Callable,
        exit_command: Callable
    ) -> None:
        """Set callback functions for navigation buttons."""
        # Navigation buttons
        self.prev_btn.config(command=prev_command)
        self.next_btn.config(command=next_command)

        # Move buttons
        self.up_btn.config(command=up_command)
        self.down_btn.config(command=down_command)
        
        # Save buttons
        self.save_btn.config(command=save_command)
        self.save_exit_btn.config(command=lambda: [save_command(), exit_command()])
        
        # Exit button
        if hasattr(self, 'exit_btn'):
            self.exit_btn.config(command=exit_command)
        

    # [All other existing methods remain exactly the same as in your original script]
    # Including: load_image_data, get_image_data, save_current, save_and_exit,
    # all event handlers (on_featured_change, on_filename_change, etc.),
    # undo/redo functionality, and export functionality
    
    def setup_bindings(self) -> None:
        """Set up keyboard and mouse bindings."""
        self.bind_all("<Control-z>", lambda e: self.undo_change())
        self.bind_all("<Control-y>", lambda e: self.redo_change())
        self.bind_all("<Control-s>", lambda e: self.save_current())
        self.keywords_entry.bind('<KeyRelease>', self.on_tags_change)
        self.keywords_entry.bind('<<ComboboxSelected>>', self.on_tag_selected)

    def load_tag_suggestions(self) -> None:
        """Load tag suggestions from configuration."""
        self.tag_suggestions = self.config.get("tag_suggestions", [])
        if hasattr(self, 'keywords_entry'):
            self.keywords_entry['values'] = self.tag_suggestions
            # Initialize with all suggestions
            self.update_tag_suggestions()

    def load_image_data(self, data: Dict) -> None:
        """Load image metadata into the form."""
        self.current_data = data
        # Convert keywords to list if it's not already
        keywords = data.get('keywords', [])
        if isinstance(keywords, str):
            keywords = [k.strip() for k in keywords.split(",") if k.strip()]

        self.original_state = {
            'filename': data.get('filename', data.get('url', '')),
            'title': data.get('title', ''),
            'caption': data.get('caption', ''),
            'keywords': keywords,
            'alt_text': data.get('alt_text', ''),
            'headline': data.get('headline', ''),
            'featured': data.get('featured', False)
        }
        
        # Clear and populate form fields
        self.filename_entry.delete(0, tk.END)
        self.title_entry.delete(0, tk.END)
        self.caption_entry.delete("1.0", tk.END)
        self.keywords_entry.delete(0, tk.END)
        self.alt_text_entry.delete("1.0", tk.END)
        self.headline_entry.delete(0, tk.END)
        
        if data:
            self.filename_entry.insert(0, self.original_state['filename'])
            self.title_entry.insert(0, self.original_state['title'])
            self.caption_entry.insert("1.0", self.original_state['caption'])
            
            #self.keywords_entry.insert(0, ", ".join(self.original_state['keywords']))
            self.keywords_entry.delete(0, tk.END)
            self.keywords_entry.insert(0, ", ".join(keywords))

            self.alt_text_entry.insert("1.0", self.original_state['alt_text'])
            self.headline_entry.insert(0, self.original_state['headline'])
            self.featured_var.set(self.original_state['featured'])
            
            if self.original_state['featured']:
                self.featured_cb.config(fg="#FFD700")
            else:
                self.featured_cb.config(fg=COLORS["dark"])
            
            if "modified_date" in data:
                mod_date = datetime.fromisoformat(data["modified_date"]).strftime("%Y-%m-%d %H:%M")
                self.status_cb(f"Last modified: {mod_date}")

        self.history = HistoryManager()
        self.update_undo_redo_buttons()

    def get_image_data(self) -> Dict:
        """Get edited metadata from the form with enhanced field handling."""
        if not self.current_data:
            return {}

        # Get and clean keywords - preserve existing comma-separated parsing
        keywords_text = self.keywords_entry.get()
        keywords = [k.strip() for k in keywords_text.split(",") if k.strip()]
        
        # Build data dict with all existing fields plus backwards compatibility
        data = {
            "filename": self.filename_entry.get().strip(),
            "title": self.title_entry.get().strip(),
            "caption": self.caption_entry.get("1.0", "end-1c").strip(),
            "keywords": keywords,
            "alt_text": self.alt_text_entry.get("1.0", "end-1c").strip(),
            "headline": self.headline_entry.get().strip(),
            "featured": self.featured_var.get(),
            "modified_date": datetime.now().isoformat(),
            # Backward compatibility
            "tags": keywords,  # Mirror keywords to tags
            "url": self.filename_entry.get().strip()  # Mirror filename to url
        }
        
        # Preserve any existing fields from current_data not in our form
        for key in self.current_data:
            if key not in data and key not in ['modified_date']:
                data[key] = self.current_data[key]
                
        return data

    def save_current(self) -> None:
        """Save metadata for current image."""
        if not self.current_data:
            return
            
        new_data = self.get_image_data()
        self.current_data.update(new_data)
        self.status_cb("Changes saved successfully")
        self.original_state = new_data.copy()
        self.history = HistoryManager()

    def save_and_exit(self) -> None:
        """Save current changes and exit."""
        self.save_current()
        self.on_exit()

    def on_exit(self) -> None:
        """Handle exit button click."""
        if self.current_data and self.has_unsaved_changes():
            if messagebox.askyesno("Unsaved Changes", "Save changes before exiting?"):
                self.save_current()
        self.master.quit()

    def has_unsaved_changes(self) -> bool:
        """Check if there are unsaved changes."""
        if not self.current_data:
            return False
        current_state = self.get_image_data()
        return any(
            current_state[key] != self.original_state.get(key, '')
            for key in current_state
        )

    def on_featured_change(self) -> None:
        """Handle featured checkbox changes."""
        if self.current_data:
            old_val = self.original_state.get('featured', False)
            new_val = self.featured_var.get()
            if old_val != new_val:
                self.history.record_change('featured', old_val, new_val)
                self.update_undo_redo_buttons()
                if new_val:
                    self.featured_cb.config(fg="#FFD700")
                else:
                    self.featured_cb.config(fg=COLORS["dark"])

    # [Include all other existing event handlers here]
    # on_filename_change, on_title_change, on_caption_change, etc.
    # These remain exactly the same as in your original script

    # Event handlers
    def on_filename_change(self, event=None) -> None:
        """Handle filename changes."""
        if self.current_data:
            old_val = self.original_state.get('filename', '')
            new_val = self.filename_entry.get().strip()
            if old_val != new_val:
                self.history.record_change('filename', old_val, new_val)
                self.update_undo_redo_buttons()

    def on_title_change(self, event=None) -> None:
        """Handle title changes."""
        if self.current_data:
            old_val = self.original_state.get('title', '')
            new_val = self.title_entry.get().strip()
            if old_val != new_val:
                self.history.record_change('title', old_val, new_val)
                self.update_undo_redo_buttons()

    def on_caption_change(self, event=None) -> None:
        """Handle caption changes."""
        if self.current_data:
            old_val = self.original_state.get('caption', '')
            new_val = self.caption_entry.get("1.0", "end-1c").strip()
            if old_val != new_val:
                self.history.record_change('caption', old_val, new_val)
                self.update_undo_redo_buttons()

    def on_tags_change(self, event=None) -> None:
        """Handle manual editing of keywords field"""
        if self.current_data:
            old_val = self.original_state.get('keywords', [])
            current_text = self.keywords_entry.get()
            new_val = [k.strip() for k in current_text.split(",") if k.strip()]
            
            if old_val != new_val:
                self.history.record_change('keywords', old_val, new_val)
                self.update_undo_redo_buttons()
            self.update_tag_suggestions()  # Update suggestions after change

    def on_tag_selected(self, event=None) -> None:
        """Handle tag selection from dropdown"""
        if not self.current_data:
            return
            
        # Get current text and selected value
        current_text = self.keywords_entry.get()
        selected = event.widget.get()
        
        # Clean existing tags
        current_tags = [k.strip() for k in current_text.split(",") if k.strip()]
        
        # Add new tag if not already present (case insensitive)
        if selected and selected.lower() not in [t.lower() for t in current_tags]:
            current_tags.append(selected)
            new_text = ", ".join(current_tags)
            self.keywords_entry.delete(0, tk.END)
            self.keywords_entry.insert(0, new_text)
            
            # Record change
            old_val = self.original_state.get('keywords', [])
            self.history.record_change('keywords', old_val, current_tags)
            self.update_undo_redo_buttons()

    def on_alt_text_change(self, event=None) -> None:
        """Handle alt text changes."""
        if self.current_data:
            old_val = self.original_state.get('alt_text', '')
            new_val = self.alt_text_entry.get("1.0", "end-1c").strip()
            if old_val != new_val:
                self.history.record_change('alt_text', old_val, new_val)
                self.update_undo_redo_buttons()

    def on_headline_change(self, event=None) -> None:
        """Handle headline changes."""
        if self.current_data:
            old_val = self.original_state.get('headline', '')
            new_val = self.headline_entry.get().strip()
            if old_val != new_val:
                self.history.record_change('headline', old_val, new_val)
                self.update_undo_redo_buttons()

    def on_featured_change(self) -> None:
        """Handle featured checkbox changes."""
        if self.current_data:
            old_val = self.original_state.get('featured', False)
            new_val = self.featured_var.get()
            if old_val != new_val:
                self.history.record_change('featured', old_val, new_val)
                self.update_undo_redo_buttons()
                # Update visual feedback
                if new_val:
                    self.featured_cb.config(fg="#FFD700")
                else:
                    self.featured_cb.config(fg=COLORS["dark"])

    def on_exit(self) -> None:
        """Handle exit button click."""
        if self.current_data and self.has_unsaved_changes():
            if messagebox.askyesno("Unsaved Changes", "Save changes before exiting?"):
                self.save_current()
        self.master.quit()

    def has_unsaved_changes(self) -> bool:
        """Check if there are unsaved changes."""
        if not self.current_data:
            return False
        current_state = self.get_image_data()
        return any(
            current_state[key] != self.original_state.get(key, '')
            for key in current_state
        )

    # Undo/Redo functionality
    def undo_change(self, event=None) -> None:
        """Undo the last change with thread safety."""
        change = self.history.get_undo_change()
        if change:
            with self.history._lock:
                self.history.redo_stack.append(change)
            self.apply_change(change['field'], change['old_value'])
            self.status_cb(f"Undo: {change['field']}")
            self.update_undo_redo_buttons()

    def redo_change(self, event=None) -> None:
        """Redo the last undone change with thread safety."""
        change = self.history.get_redo_change()
        if change:
            with self.history._lock:
                self.history.undo_stack.append(change)
            self.apply_change(change['field'], change['new_value'])
            self.status_cb(f"Redo: {change['field']}")
            self.update_undo_redo_buttons()

    def apply_change(self, field: str, value: Any) -> None:
        """Apply a change to the appropriate field."""
        if field == 'filename':
            self.filename_entry.delete(0, tk.END)
            self.filename_entry.insert(0, value)
        elif field == 'title':
            self.title_entry.delete(0, tk.END)
            self.title_entry.insert(0, value)
        elif field == 'caption':
            self.caption_entry.delete("1.0", tk.END)
            self.caption_entry.insert("1.0", value)
        elif field == 'keywords':
            self.keywords_entry.delete(0, tk.END)
            self.keywords_entry.insert(0, ", ".join(value))
        elif field == 'alt_text':
            self.alt_text_entry.delete("1.0", tk.END)
            self.alt_text_entry.insert("1.0", value)
        elif field == 'headline':
            self.headline_entry.delete(0, tk.END)
            self.headline_entry.insert(0, value)
        elif field == 'featured':
            self.featured_var.set(value)
            self.on_featured_change()  # Update visual state

    def update_undo_redo_buttons(self) -> None:
        """Update undo/redo button states based on history."""
        self.undo_btn["state"] = "normal" if self.history.undo_stack else "disabled"
        self.redo_btn["state"] = "normal" if self.history.redo_stack else "disabled"

    # Export functionality
    def on_export(self) -> None:
        """Handle export button click."""
        if not self.current_data:
            self.status_cb("No image selected for export")
            return
            
        export_settings = {
            "format": self.export_format.get(),
            "quality": self.export_quality.get(),
            "resize_enabled": self.resize_enabled.get(),
            "max_width": self.max_width.get(),
            "max_height": self.max_height.get()
        }
        
        # Update config
        self.config["export_settings"] = export_settings
        self.status_cb(f"Exporting with settings: {export_settings}")
        # Actual export implementation would go here